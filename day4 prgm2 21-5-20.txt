//Java program for implementation of RR scheduling 
  
public class GFG  
{ 
    // Method to find the waiting time for all 
    // processes 
    static void findWaitingTime(int processes[], int n, 
                 int bt[], int wt[], int quantum) 
    { 
        // Make a copy of burst times bt[] to store remaining 
        // burst times. 
        int rem_bt[] = new int[n]; 
        for (int i = 0 ; i < n ; i++) 
            rem_bt[i] =  bt[i]; 
       
        int t = 0; // Current time 
       
        // Keep traversing processes in round robin manner 
        // until all of them are not done. 
        while(true) 
        { 
            boolean done = true; 
       
            // Traverse all processes one by one repeatedly 
            for (int i = 0 ; i < n; i++) 
            { 
                // If burst time of a process is greater than 0 
                // then only need to process further 
                if (rem_bt[i] > 0) 
                { 
                    done = false; // There is a pending process 
       
                    if (rem_bt[i] > quantum) 
                    { 
                        // Increase the value of t i.e. shows 
                        // how much time a process has been processed 
                        t += quantum; 
       
                        // Decrease the burst_time of current process 
                        // by quantum 
                        rem_bt[i] -= quantum; 
                    } 
       
                    // If burst time is smaller than or equal to 
                    // quantum. Last cycle for this process 
                    else
                    { 
                        // Increase the value of t i.e. shows 
                        // how much time a process has been processed 
                        t = t + rem_bt[i]; 
       
                        // Waiting time is current time minus time 
                        // used by this process 
                        wt[i] = t - bt[i]; 
       
                        // As the process gets fully executed 
                        // make its remaining burst time = 0 
                        rem_bt[i] = 0; 
                    } 
                } 
            } 
       
            // If all processes are done 
            if (done == true) 
              break; 
        } 
    } 
       
    // Method to calculate turn around time 
    static void findTurnAroundTime(int processes[], int n, 
                            int bt[], int wt[], int tat[]) 
    { 
        // calculating turnaround time by adding 
        // bt[i] + wt[i] 
        for (int i = 0; i < n ; i++) 
            